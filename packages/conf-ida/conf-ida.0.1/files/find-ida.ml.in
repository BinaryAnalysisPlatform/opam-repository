#load "unix.cma"

open Printf

type sys =
  | MacOs
  | Linux
  | Other of string

let os = match "%{os}%" with
  | "macos" -> MacOs
  | "linux" -> Linux
  | s -> Other s

let (/) = Filename.concat

let getenv_opt var =
  try Some (Sys.getenv var)
  with Not_found -> None

let headless = os = Linux && getenv_opt "DISPLAY" = None

let read_all ch =
  (* We use 65536 because that is the size of OCaml's IO buffers. *)
  let buf_size = 65536 in
  let buf = Buffer.create buf_size in
  let rec loop () =
    try
      let ch = input_char ch in
      let () = Buffer.add_char buf ch in
      loop ()
    with End_of_file -> () in
  loop ();
  Buffer.contents buf

let split_on_char sep s =
  let r = ref [] in
  let j = ref (String.length s) in
  for i = String.length s - 1 downto 0 do
    if String.unsafe_get s i = sep then begin
      r := String.sub s (i + 1) (!j - i - 1) :: !r;
      j := i
    end
  done;
  String.sub s 0 !j :: !r

let input_lines ch =
  let data = read_all ch in
  let data = split_on_char '\n' data in
  List.filter (fun s -> s <> "") data

let unix_cmd cmd =
  try
    let inp = Unix.open_process_in cmd in
    let res = input_lines inp in
    let _ = Unix.close_process_in inp in
    res
  with _ -> []

let unix_cmd' cmd =
  match unix_cmd cmd with
  | [] -> None
  | hd :: _ -> Some hd

let which x = unix_cmd' (sprintf "which %s" x)
let which_ida () = which "idaq64"

let find_idaq64 path =
  let cmd = sprintf
      "find %s -executable -type f -name \"idaq64\" 2>/dev/null | sort -n -r" path in
  unix_cmd' cmd

let find_at_home () =
  match getenv_opt "HOME" with
  | None -> None
  | Some home -> find_idaq64 home

let locate_linux () =
  match find_at_home () with
  | None -> find_idaq64 "/"
  | x -> x

let locate_macos () =
  match unix_cmd "mdfind -name idaq | sort -n -r" with
  | [] -> None
  | pathes ->
    try
      let path =
        List.find (fun p -> Filename.basename p = "idaq.app") pathes in
      Some (sprintf "%s/Contents/MacOS/" path)
    with Not_found -> None

let rec find fs =
  match fs with
  | [] -> None
  | f :: fs ->
    match f () with
    | None -> find fs
    | x -> x

let locate () =
  match os with
  | MacOs -> find [which_ida; locate_macos]
  | Linux -> find [which_ida; locate_linux]
  | Other system ->
    eprintf
      "warning: we don't know how to find programs on %s!\n" system;
    exit 1

let write path =
  let dir, file_depends =
    if Sys.is_directory path then path, ""
    else
      Filename.dirname path,
      sprintf "file-depends: [ [ %S %S ] ]\n"
        path (Digest.to_hex (Digest.file path)) in
  let oc = open_out "%{_:name}%.config" in
  fprintf oc {|
opam-version: "2.0"
%s
variables {
  path: %S
  headless: %b
}
|} file_depends dir headless;
  close_out oc

let of_config () =
  let path = "%{ida-path}%" in
  if path = "" then None
  else Some path

let of_env () = getenv_opt "IDA_PATH"

let () =
  match find [ of_config; of_env; locate; ] with
  | Some path -> write path
  | None ->
    eprintf "failed to locate IDA Pro\n";
    exit 1
