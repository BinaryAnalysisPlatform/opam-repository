#load "unix.cma"

open Printf

let read_all ch =
  (* We use 65536 because that is the size of OCaml's IO buffers. *)
  let buf_size = 65536 in
  let buf = Buffer.create buf_size in
  let rec loop () =
    try
      let ch = input_char ch in
      let () = Buffer.add_char buf ch in
      loop ()
    with End_of_file -> () in
  loop ();
  Buffer.contents buf

let split_on_char sep s =
  let r = ref [] in
  let j = ref (String.length s) in
  for i = String.length s - 1 downto 0 do
    if String.unsafe_get s i = sep then begin
      r := String.sub s (i + 1) (!j - i - 1) :: !r;
      j := i
    end
  done;
  String.sub s 0 !j :: !r

let input_lines ch =
  let data = read_all ch in
  let data = split_on_char '\n' data in
  List.filter (fun s -> s <> "") data

let unix_cmd cmd =
  try
    let inp = Unix.open_process_in cmd in
    let res = input_lines inp in
    let _ = Unix.close_process_in inp in
    res
  with _ -> []

let unix_cmd' cmd = match unix_cmd cmd with
  | [] -> None
  | hd :: _ -> Some hd

let which x = unix_cmd' (sprintf "which %s" x)

let write objdump cxxfilt targets =
  let digest path = Digest.to_hex (Digest.file path) in
  let depends = function
    | None -> ""
    | Some file ->
      sprintf "[ %S %S ]" file (digest file) in
  let get x = match x with
    | None -> ""
    | Some x -> x in
  let file_depends =
    let deps = String.concat " " [depends objdump; depends cxxfilt] in
    if deps = "" then ""
    else sprintf "file-depends: [ %s ]" deps in
  let oc = open_out "%{_:name}%.config" in
  let cxxfilt = get cxxfilt in
  let objdump = get objdump in
  fprintf oc {|
opam-version: "2.0"
%s
variables {
  cxxfilt: %S
  objdump: %S
  targets: %S
}
|} file_depends cxxfilt objdump targets;
  close_out oc

let collect_objdumps () =
  let find where =
    unix_cmd
      (sprintf "find %s -name \"*objdump\" -executable -type f" where) in
  find "/bin" @ find "/usr"

let collect_targets objdumps =
  let has_prefix str pref =
    let len = String.length pref in
    len <= String.length str &&
    String.(sub str 0 len = pref) in
  List.fold_left (fun acc obj ->
      let file = Filename.basename obj in
      if file = "objdump" || file = "gobjdump" || has_prefix file "llvm"
      then acc
      else
      if Filename.check_suffix file "-objdump" then
        Filename.chop_suffix file "-objdump" :: acc
      else acc) [] objdumps

let string_of_targets targets =
  List.fold_left (fun acc x ->
      sprintf "%s\"%s\"; " acc x) "[" targets ^ "]"

let () =
  match "%{os}%" with
  | "linux" ->
    let objdump = which "objdump" in
    let cxxfilt = which "c++filt" in
    let objdumps = collect_objdumps () in
    let targets = collect_targets objdumps in
    let targets = string_of_targets targets in
    write objdump cxxfilt targets
  | "macos" ->
    let objdump= which "gobjdump" in
    let cxxfilt = which "c++filt" in
    let objdumps = unix_cmd "mdfind -name objdump" in
    let objdumps = List.filter (fun x -> not (Sys.is_directory x)) objdumps in
    let targets = collect_targets objdumps in
    let targets = string_of_targets targets in
    write objdump cxxfilt targets
  | s ->
    eprintf "unsupported OS %s\n" s;
    exit 1
